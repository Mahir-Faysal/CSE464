
Used 1 reference
üõí E-Commerce Provenance Tracking System - Documentation
üìã Overview
The E-Commerce Provenance Tracking System is a comprehensive Streamlit web application that provides complete audit trail and provenance tracking for an e-commerce database built on Oracle 21g XE. The system tracks WHO made changes, WHAT was changed, WHEN changes occurred, and WHY changes were made across all business entities.

üèóÔ∏è System Architecture
Technology Stack
Frontend: Streamlit (Python web framework)
Backend: Oracle 21g XE Database
Database Connector: oracledb Python library
Data Processing: Pandas
Visualizations: Plotly Express & Plotly Graph Objects
Deployment: Local development environment
Database Connection Configuration
üìä Application Features
1. Current Data View (Tab 1)
Purpose: Display real-time system data across all entities Components:

Users: Active user accounts with roles and creation timestamps
Customers: Customer profiles with contact information
Products: Product catalog with pricing and inventory
Orders: Order summaries with customer and status information
Payments: Payment transactions with methods and statuses
Key Functions:

get_current_users() - Fetches all system users
get_current_customers() - Retrieves customer data with creator information
get_current_products() - Shows product catalog with stock levels
get_current_orders() - Displays order summaries
get_current_payments() - Lists payment transactions
2. Audit Logs (Tab 2)
Purpose: Comprehensive change history tracking with date filtering Features:

Date Range Filtering: Start and end date selection
Multi-Entity Tracking: Products, Orders, Customers, Payments
Change Details: Before/after values, timestamps, user attribution
Key Functions:

get_audit_products(start_date, end_date) - Product change history
get_audit_orders(start_date, end_date) - Order modification tracking
get_audit_customers(start_date, end_date) - Customer profile changes
get_audit_payments(start_date, end_date) - Payment status updates
3. Provenance Queries (Tab 3)
Purpose: Advanced provenance analysis using WHO/WHAT/WHEN/WHY/HOW/WHERE methodology

WHY-Provenance
Focus: Business justifications for changes
Example: "Why was the laptop price reduced to $1199.99?"
Data: Price changes with reasons and business impact
Visualization: Bar charts showing price change distribution
HOW-Provenance
Focus: Process flow and state transitions
Example: "How did Order #123 progress from pending to delivered?"
Data: Status transitions with time intervals
Visualization: Status flow diagrams
WHERE-Provenance
Focus: Source attribution and user activity
Example: "Where did these changes originate? Which user made them?"
Data: User actions across all tables
Visualization: User activity heatmaps
4. Analytics Dashboard (Tab 4)
Purpose: High-level insights and system activity patterns

Components:

Change Summary: Operations by table and type
User Activity: Individual user contribution analysis
Visual Analytics: Pie charts and bar graphs
Trend Analysis: Change patterns over time
Key Functions:

get_provenance_summary() - System-wide change statistics
get_user_activity_summary() - User performance metrics
5. Individual Traces (Tab 5)
Purpose: Detailed history tracking for specific records

Product Trace
Complete lifecycle from creation to current state
Price history with business justifications
Stock level changes and inventory management
User attribution for each modification
Order Trace
Status progression visualization
Amount adjustments and reasons
Processing timeline analysis
Customer service interaction tracking
Customer Trace
Profile evolution over time
Contact information updates
Account modification history
6. Customer Journey (Tab 6)
Purpose: End-to-end customer experience tracking

Features:

Lineage Tracking: Complete customer interaction history
Cross-Entity Analysis: Customer ‚Üí Orders ‚Üí Payments flow
Timeline View: Chronological customer activity
Narrative Summary: Human-readable journey description
üîß Core Functions Documentation
Database Connection
Caching: Connection cached for performance
Error Handling: Graceful failure with user feedback
Security: Connection pooling and resource management
Query Execution
Parameter Binding: SQL injection prevention
Error Handling: Database and application-level exceptions
Data Format: Consistent DataFrame output
Provenance Functions
üìà Data Visualization Components
Interactive Charts
Price Change Analysis: Bar charts with hover details
Status Transition Flow: Process flow diagrams
User Activity Heatmaps: Multi-dimensional activity visualization
Timeline Views: Chronological event progression
Data Tables
Sortable Columns: User-controlled data ordering
Responsive Design: Container-width tables
Rich Formatting: Timestamp formatting and data type handling
üõ°Ô∏è Security Features
Database Security
Parameterized Queries: SQL injection prevention
Connection Pooling: Resource management
Error Sanitization: Sensitive information protection
User Attribution
Complete Audit Trail: Every change tracked to specific users
Role-Based Tracking: User roles recorded with actions
Session Management: Connection and session tracking
üîç Troubleshooting Guide
Common Issues
Database Connection Failed
Solutions:

Verify DB_USER, DB_PASSWORD, DB_DSN configuration
Ensure Oracle database is running
Check network connectivity and firewall settings
Validate database service status
Empty Query Results
Causes:

Missing audit triggers in database
No data in specified date range
Incorrect filter parameters
Database permissions issues
Performance Issues
Optimization Strategies:

Use date range filters to limit result sets
Implement query result caching
Add database indexes on frequently queried columns
Use connection pooling for multiple users
üöÄ Installation & Setup
Prerequisites
Database Setup
Oracle 21g XE Installation: Ensure database is running
Schema Creation: Execute ecommerce_provenance_db.sql
Trigger Verification: Confirm all audit triggers are active
Sample Data: Load test data for demonstration
Application Deployment
Configuration
üìä Performance Metrics
Application Statistics
Page Load Time: < 2 seconds for cached queries
Query Performance: Optimized with date range filtering
Memory Usage: Efficient DataFrame processing
Concurrent Users: Supports multiple simultaneous sessions
Database Metrics
Audit Log Growth: Automatic cleanup recommended
Index Usage: Optimal query path selection
Connection Efficiency: Pooled connection management
üîÆ Future Enhancements
Planned Features
Real-time Notifications: Live audit trail updates
Advanced Analytics: Machine learning insights
Export Functionality: PDF/Excel report generation
Mobile Responsiveness: Tablet and phone optimization
API Integration: RESTful service endpoints
Scalability Improvements
Microservices Architecture: Component separation
Distributed Database: Multi-node Oracle setup
Caching Layer: Redis integration
Load Balancing: Multiple application instances
üìù API Reference
Query Parameters
start_date: Filter start date (YYYY-MM-DD)
end_date: Filter end date (YYYY-MM-DD)
customer_id: Specific customer identifier
product_id: Specific product identifier
order_id: Specific order identifier
Return Formats
DataFrame: Pandas DataFrame with typed columns
Error Messages: Structured error information
Status Codes: HTTP-style response indicators
üìû Support & Maintenance
Log Monitoring
Application Logs: Streamlit console output
Database Logs: Oracle alert logs
Error Tracking: Exception handling and reporting
Backup Strategy
Database Backup: Regular Oracle RMAN backups
Configuration Backup: Application settings preservation
Audit Data Archival: Historical data management
üéØ Use Cases
Business Intelligence
Track customer behavior patterns
Analyze product performance trends
Monitor order processing efficiency
Identify user activity anomalies
Compliance & Auditing
Regulatory compliance reporting
Financial audit trail verification
Data governance documentation
Change management accountability
Operations Management
System performance monitoring
User activity analysis
Data quality assurance
Process optimization insights
